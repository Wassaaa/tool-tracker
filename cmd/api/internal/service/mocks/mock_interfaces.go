// Code generated by MockGen. DO NOT EDIT.
// Source: tool_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/wassaaa/tool-tracker/cmd/api/internal/domain"
)

// MockToolRepo is a mock of ToolRepo interface.
type MockToolRepo struct {
	ctrl     *gomock.Controller
	recorder *MockToolRepoMockRecorder
}

// MockToolRepoMockRecorder is the mock recorder for MockToolRepo.
type MockToolRepoMockRecorder struct {
	mock *MockToolRepo
}

// NewMockToolRepo creates a new mock instance.
func NewMockToolRepo(ctrl *gomock.Controller) *MockToolRepo {
	mock := &MockToolRepo{ctrl: ctrl}
	mock.recorder = &MockToolRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolRepo) EXPECT() *MockToolRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockToolRepo) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockToolRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockToolRepo)(nil).Count))
}

// Create mocks base method.
func (m *MockToolRepo) Create(name string, status domain.ToolStatus) (domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, status)
	ret0, _ := ret[0].(domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockToolRepoMockRecorder) Create(name, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockToolRepo)(nil).Create), name, status)
}

// Delete mocks base method.
func (m *MockToolRepo) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockToolRepoMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockToolRepo)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockToolRepo) Get(id string) (domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockToolRepoMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockToolRepo)(nil).Get), id)
}

// List mocks base method.
func (m *MockToolRepo) List(limit, offset int) ([]domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockToolRepoMockRecorder) List(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockToolRepo)(nil).List), limit, offset)
}

// ListByStatus mocks base method.
func (m *MockToolRepo) ListByStatus(status domain.ToolStatus, limit, offset int) ([]domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByStatus", status, limit, offset)
	ret0, _ := ret[0].([]domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByStatus indicates an expected call of ListByStatus.
func (mr *MockToolRepoMockRecorder) ListByStatus(status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByStatus", reflect.TypeOf((*MockToolRepo)(nil).ListByStatus), status, limit, offset)
}

// ListByUser mocks base method.
func (m *MockToolRepo) ListByUser(userID string, limit, offset int) ([]domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockToolRepoMockRecorder) ListByUser(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockToolRepo)(nil).ListByUser), userID, limit, offset)
}

// Update mocks base method.
func (m *MockToolRepo) Update(arg0 domain.Tool) (domain.Tool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(domain.Tool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockToolRepoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockToolRepo)(nil).Update), arg0)
}

// MockEventLogger is a mock of EventLogger interface.
type MockEventLogger struct {
	ctrl     *gomock.Controller
	recorder *MockEventLoggerMockRecorder
}

// MockEventLoggerMockRecorder is the mock recorder for MockEventLogger.
type MockEventLoggerMockRecorder struct {
	mock *MockEventLogger
}

// NewMockEventLogger creates a new mock instance.
func NewMockEventLogger(ctrl *gomock.Controller) *MockEventLogger {
	mock := &MockEventLogger{ctrl: ctrl}
	mock.recorder = &MockEventLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventLogger) EXPECT() *MockEventLoggerMockRecorder {
	return m.recorder
}

// LogToolCheckedIn mocks base method.
func (m *MockEventLogger) LogToolCheckedIn(toolID, userID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolCheckedIn", toolID, userID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolCheckedIn indicates an expected call of LogToolCheckedIn.
func (mr *MockEventLoggerMockRecorder) LogToolCheckedIn(toolID, userID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolCheckedIn", reflect.TypeOf((*MockEventLogger)(nil).LogToolCheckedIn), toolID, userID, actorID, notes)
}

// LogToolCheckedOut mocks base method.
func (m *MockEventLogger) LogToolCheckedOut(toolID, userID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolCheckedOut", toolID, userID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolCheckedOut indicates an expected call of LogToolCheckedOut.
func (mr *MockEventLoggerMockRecorder) LogToolCheckedOut(toolID, userID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolCheckedOut", reflect.TypeOf((*MockEventLogger)(nil).LogToolCheckedOut), toolID, userID, actorID, notes)
}

// LogToolCreated mocks base method.
func (m *MockEventLogger) LogToolCreated(toolID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolCreated", toolID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolCreated indicates an expected call of LogToolCreated.
func (mr *MockEventLoggerMockRecorder) LogToolCreated(toolID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolCreated", reflect.TypeOf((*MockEventLogger)(nil).LogToolCreated), toolID, actorID, notes)
}

// LogToolDeleted mocks base method.
func (m *MockEventLogger) LogToolDeleted(toolID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolDeleted", toolID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolDeleted indicates an expected call of LogToolDeleted.
func (mr *MockEventLoggerMockRecorder) LogToolDeleted(toolID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolDeleted", reflect.TypeOf((*MockEventLogger)(nil).LogToolDeleted), toolID, actorID, notes)
}

// LogToolLost mocks base method.
func (m *MockEventLogger) LogToolLost(toolID, userID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolLost", toolID, userID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolLost indicates an expected call of LogToolLost.
func (mr *MockEventLoggerMockRecorder) LogToolLost(toolID, userID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolLost", reflect.TypeOf((*MockEventLogger)(nil).LogToolLost), toolID, userID, notes)
}

// LogToolMaintenance mocks base method.
func (m *MockEventLogger) LogToolMaintenance(toolID, userID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolMaintenance", toolID, userID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolMaintenance indicates an expected call of LogToolMaintenance.
func (mr *MockEventLoggerMockRecorder) LogToolMaintenance(toolID, userID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolMaintenance", reflect.TypeOf((*MockEventLogger)(nil).LogToolMaintenance), toolID, userID, notes)
}

// LogToolUpdated mocks base method.
func (m *MockEventLogger) LogToolUpdated(toolID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogToolUpdated", toolID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogToolUpdated indicates an expected call of LogToolUpdated.
func (mr *MockEventLoggerMockRecorder) LogToolUpdated(toolID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogToolUpdated", reflect.TypeOf((*MockEventLogger)(nil).LogToolUpdated), toolID, actorID, notes)
}

// LogUserCreated mocks base method.
func (m *MockEventLogger) LogUserCreated(userID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUserCreated", userID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUserCreated indicates an expected call of LogUserCreated.
func (mr *MockEventLoggerMockRecorder) LogUserCreated(userID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUserCreated", reflect.TypeOf((*MockEventLogger)(nil).LogUserCreated), userID, actorID, notes)
}

// LogUserDeleted mocks base method.
func (m *MockEventLogger) LogUserDeleted(userID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUserDeleted", userID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUserDeleted indicates an expected call of LogUserDeleted.
func (mr *MockEventLoggerMockRecorder) LogUserDeleted(userID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUserDeleted", reflect.TypeOf((*MockEventLogger)(nil).LogUserDeleted), userID, actorID, notes)
}

// LogUserUpdated mocks base method.
func (m *MockEventLogger) LogUserUpdated(userID, actorID, notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogUserUpdated", userID, actorID, notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogUserUpdated indicates an expected call of LogUserUpdated.
func (mr *MockEventLoggerMockRecorder) LogUserUpdated(userID, actorID, notes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUserUpdated", reflect.TypeOf((*MockEventLogger)(nil).LogUserUpdated), userID, actorID, notes)
}
