// Code generated by MockGen. DO NOT EDIT.
// Source: event_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/wassaaa/tool-tracker/cmd/api/internal/domain"
	repo "github.com/wassaaa/tool-tracker/cmd/api/internal/repo"
)

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockEventRepo) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockEventRepoMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockEventRepo)(nil).Count))
}

// Create mocks base method.
func (m *MockEventRepo) Create(eventType domain.EventType, toolID, userID, actorID *string, notes string, metadata *string) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", eventType, toolID, userID, actorID, notes, metadata)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventRepoMockRecorder) Create(eventType, toolID, userID, actorID, notes, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventRepo)(nil).Create), eventType, toolID, userID, actorID, notes, metadata)
}

// Get mocks base method.
func (m *MockEventRepo) Get(id string) (domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEventRepoMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEventRepo)(nil).Get), id)
}

// List mocks base method.
func (m *MockEventRepo) List(limit, offset int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, offset)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventRepoMockRecorder) List(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventRepo)(nil).List), limit, offset)
}

// ListByTool mocks base method.
func (m *MockEventRepo) ListByTool(toolID string, limit, offset int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTool", toolID, limit, offset)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTool indicates an expected call of ListByTool.
func (mr *MockEventRepoMockRecorder) ListByTool(toolID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTool", reflect.TypeOf((*MockEventRepo)(nil).ListByTool), toolID, limit, offset)
}

// ListByType mocks base method.
func (m *MockEventRepo) ListByType(eventType domain.EventType, limit, offset int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByType", eventType, limit, offset)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByType indicates an expected call of ListByType.
func (mr *MockEventRepoMockRecorder) ListByType(eventType, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByType", reflect.TypeOf((*MockEventRepo)(nil).ListByType), eventType, limit, offset)
}

// ListByUser mocks base method.
func (m *MockEventRepo) ListByUser(userID string, limit, offset int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userID, limit, offset)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockEventRepoMockRecorder) ListByUser(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockEventRepo)(nil).ListByUser), userID, limit, offset)
}

// ListWithFilter mocks base method.
func (m *MockEventRepo) ListWithFilter(filter repo.EventFilter, limit, offset int) ([]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithFilter", filter, limit, offset)
	ret0, _ := ret[0].([]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithFilter indicates an expected call of ListWithFilter.
func (mr *MockEventRepoMockRecorder) ListWithFilter(filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithFilter", reflect.TypeOf((*MockEventRepo)(nil).ListWithFilter), filter, limit, offset)
}
