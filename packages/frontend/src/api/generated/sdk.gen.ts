// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
  DeleteToolsByIdData,
  DeleteToolsByIdErrors,
  DeleteToolsByIdResponses,
  DeleteUsersByIdData,
  DeleteUsersByIdErrors,
  DeleteUsersByIdResponses,
  GetAdminAuditData,
  GetAdminAuditErrors,
  GetAdminAuditResponses,
  GetAdminStatsData,
  GetAdminStatsErrors,
  GetAdminStatsResponses,
  GetEventsByIdData,
  GetEventsByIdErrors,
  GetEventsByIdResponses,
  GetEventsData,
  GetEventsErrors,
  GetEventsResponses,
  GetToolsByIdData,
  GetToolsByIdErrors,
  GetToolsByIdHistoryData,
  GetToolsByIdHistoryErrors,
  GetToolsByIdHistoryResponses,
  GetToolsByIdResponses,
  GetToolsData,
  GetToolsErrors,
  GetToolsResponses,
  GetUsersByIdActivityData,
  GetUsersByIdActivityErrors,
  GetUsersByIdActivityResponses,
  GetUsersByIdData,
  GetUsersByIdErrors,
  GetUsersByIdResponses,
  GetUsersByIdToolsData,
  GetUsersByIdToolsErrors,
  GetUsersByIdToolsResponses,
  GetUsersData,
  GetUsersErrors,
  GetUsersResponses,
  PostToolsByIdCheckinData,
  PostToolsByIdCheckinErrors,
  PostToolsByIdCheckinResponses,
  PostToolsByIdCheckoutData,
  PostToolsByIdCheckoutErrors,
  PostToolsByIdCheckoutResponses,
  PostToolsByIdLostData,
  PostToolsByIdLostErrors,
  PostToolsByIdLostResponses,
  PostToolsByIdMaintenanceData,
  PostToolsByIdMaintenanceErrors,
  PostToolsByIdMaintenanceResponses,
  PostToolsData,
  PostToolsErrors,
  PostToolsResponses,
  PostUsersData,
  PostUsersErrors,
  PostUsersResponses,
  PutToolsByIdData,
  PutToolsByIdErrors,
  PutToolsByIdResponses,
  PutUsersByIdData,
  PutUsersByIdErrors,
  PutUsersByIdResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = Options2<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get audit log
 * Get recent audit events for administrative review
 */
export const getAdminAudit = <ThrowOnError extends boolean = false>(
  options?: Options<GetAdminAuditData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetAdminAuditResponses, GetAdminAuditErrors, ThrowOnError>(
    {
      url: '/admin/audit',
      ...options,
    },
  );
};

/**
 * Get system statistics
 * Get comprehensive statistics about tools, users, and events
 */
export const getAdminStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetAdminStatsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetAdminStatsResponses, GetAdminStatsErrors, ThrowOnError>(
    {
      url: '/admin/stats',
      ...options,
    },
  );
};

/**
 * List all events
 * Get a list of events with pagination and optional filtering
 */
export const getEvents = <ThrowOnError extends boolean = false>(
  options?: Options<GetEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetEventsResponses, GetEventsErrors, ThrowOnError>({
    url: '/events',
    ...options,
  });
};

/**
 * Get an event by ID
 * Get a specific event by its ID
 */
export const getEventsById = <ThrowOnError extends boolean = false>(
  options: Options<GetEventsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<GetEventsByIdResponses, GetEventsByIdErrors, ThrowOnError>({
    url: '/events/{id}',
    ...options,
  });
};

/**
 * List all tools
 * Get a list of tools with pagination and optional status filtering
 */
export const getTools = <ThrowOnError extends boolean = false>(
  options?: Options<GetToolsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetToolsResponses, GetToolsErrors, ThrowOnError>({
    url: '/tools',
    ...options,
  });
};

/**
 * Create a new tool
 * Create a new tool with name and status
 */
export const postTools = <ThrowOnError extends boolean = false>(
  options: Options<PostToolsData, ThrowOnError>,
) => {
  return (options.client ?? client).post<PostToolsResponses, PostToolsErrors, ThrowOnError>({
    url: '/tools',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a tool
 * Delete a tool from the system
 */
export const deleteToolsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteToolsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteToolsByIdResponses,
    DeleteToolsByIdErrors,
    ThrowOnError
  >({
    url: '/tools/{id}',
    ...options,
  });
};

/**
 * Get a tool by ID
 * Get a specific tool by its ID
 */
export const getToolsById = <ThrowOnError extends boolean = false>(
  options: Options<GetToolsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<GetToolsByIdResponses, GetToolsByIdErrors, ThrowOnError>({
    url: '/tools/{id}',
    ...options,
  });
};

/**
 * Update a tool
 * Update a tool's name and status
 */
export const putToolsById = <ThrowOnError extends boolean = false>(
  options: Options<PutToolsByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<PutToolsByIdResponses, PutToolsByIdErrors, ThrowOnError>({
    url: '/tools/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check in a tool from a user
 * Check in a tool that was previously checked out
 */
export const postToolsByIdCheckin = <ThrowOnError extends boolean = false>(
  options: Options<PostToolsByIdCheckinData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostToolsByIdCheckinResponses,
    PostToolsByIdCheckinErrors,
    ThrowOnError
  >({
    url: '/tools/{id}/checkin',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Check out a tool to a user
 * Check out a tool to a specific user with optional notes
 */
export const postToolsByIdCheckout = <ThrowOnError extends boolean = false>(
  options: Options<PostToolsByIdCheckoutData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostToolsByIdCheckoutResponses,
    PostToolsByIdCheckoutErrors,
    ThrowOnError
  >({
    url: '/tools/{id}/checkout',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get tool history
 * Get the complete event history for a specific tool
 */
export const getToolsByIdHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetToolsByIdHistoryData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetToolsByIdHistoryResponses,
    GetToolsByIdHistoryErrors,
    ThrowOnError
  >({
    url: '/tools/{id}/history',
    ...options,
  });
};

/**
 * Mark a tool as lost
 * Mark a tool as lost or missing
 */
export const postToolsByIdLost = <ThrowOnError extends boolean = false>(
  options: Options<PostToolsByIdLostData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostToolsByIdLostResponses,
    PostToolsByIdLostErrors,
    ThrowOnError
  >({
    url: '/tools/{id}/lost',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Send a tool to maintenance
 * Mark a tool as being in maintenance
 */
export const postToolsByIdMaintenance = <ThrowOnError extends boolean = false>(
  options: Options<PostToolsByIdMaintenanceData, ThrowOnError>,
) => {
  return (options.client ?? client).post<
    PostToolsByIdMaintenanceResponses,
    PostToolsByIdMaintenanceErrors,
    ThrowOnError
  >({
    url: '/tools/{id}/maintenance',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * List all users
 * Get a list of users with pagination and optional role filtering
 */
export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetUsersResponses, GetUsersErrors, ThrowOnError>({
    url: '/users',
    ...options,
  });
};

/**
 * Create a new user
 * Create a new user with name, email, and role
 */
export const postUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostUsersData, ThrowOnError>,
) => {
  return (options.client ?? client).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a user
 * Delete a user from the system
 */
export const deleteUsersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteUsersByIdResponses,
    DeleteUsersByIdErrors,
    ThrowOnError
  >({
    url: '/users/{id}',
    ...options,
  });
};

/**
 * Get a user by ID
 * Get a specific user by their ID
 */
export const getUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<GetUsersByIdResponses, GetUsersByIdErrors, ThrowOnError>({
    url: '/users/{id}',
    ...options,
  });
};

/**
 * Update a user
 * Update a user's name, email, and role
 */
export const putUsersById = <ThrowOnError extends boolean = false>(
  options: Options<PutUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).put<PutUsersByIdResponses, PutUsersByIdErrors, ThrowOnError>({
    url: '/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get user activity
 * Get the complete activity history for a specific user
 */
export const getUsersByIdActivity = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdActivityData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetUsersByIdActivityResponses,
    GetUsersByIdActivityErrors,
    ThrowOnError
  >({
    url: '/users/{id}/activity',
    ...options,
  });
};

/**
 * Get tools assigned to user
 * Get list of tools currently checked out by a specific user
 */
export const getUsersByIdTools = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByIdToolsData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetUsersByIdToolsResponses,
    GetUsersByIdToolsErrors,
    ThrowOnError
  >({
    url: '/users/{id}/tools',
    ...options,
  });
};
