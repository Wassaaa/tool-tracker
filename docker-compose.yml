services:
  db:
    container_name: db
    image: postgres:16-alpine
    ports:
      - "5432:5432"  # Expose for local development
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: tooltracker
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d tooltracker"]
      interval: 3s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  backend:
    container_name: backend
    build:
      context: ./packages/backend
      dockerfile: Dockerfile.dev
      target: backend-dev
    ports:
      - "8000:8000"  # Expose for local development
    volumes:
      # Bind mount source for hot reload
      - ./packages/backend:/app
      # Anonymous volumes for build artifacts
      - /app/tmp
      - /app/.go
    environment:
      - DATABASE_URL=postgres://app:app@db:5432/tooltracker?sslmode=disable
      - GIN_MODE=debug
      - PORT=8000
    depends_on:
      db:
        condition: service_healthy
    working_dir: /app
    command: ["air", "-c", ".air.toml"]
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.dev
      target: frontend-dev
    volumes:
      # Bind mount frontend source for hot reload
      - ./packages/frontend:/app/packages/frontend
      # Anonymous volume for node_modules to avoid conflicts
      - /app/node_modules
      - /app/packages/frontend/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=/api
    working_dir: /app/packages/frontend
    command: ["/bin/sh", "-c", "cd /app/packages/frontend && pnpm dev --host 0.0.0.0"]
    networks:
      - app-network

  caddy:
    container_name: caddy
    image: caddy:2-alpine
    ports:
      - "8443:443"
      - "8080:80"
    volumes:
      - ./packages/caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  adminer:
    container_name: adminer
    image: adminer:4.8.1
    restart: always
    ports:
      - "9000:8080"
    depends_on:
      - db
    networks:
      - app-network

volumes:
  pgdata:
  caddy_data:
  caddy_config:

networks:
  app-network:
    driver: bridge
